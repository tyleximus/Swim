@using Swim.App.Services;
@using Swim.Shared.Models;
@inject ISwimService SwimService

<style>
    .table-row {
        background-image: linear-gradient(to right, white 13%, cyan 86%);
    }

        .table-row td:nth-child(3) {
            border-left-width: 1px;
        }

    .table td:nth-child(1) {
        text-align: left;
    }

    .table td:nth-child(2) {
        text-align: left;
    }

    .cell-width-primary {
        width: 12%;
    }

    .cell-width-secondary {
        width: 7%;
    }

    .miss {
        background-color: white !important;
    }
</style>

@* @if (loadingProgressTimes)
{
    <h2>Loading athlete information...</h2>
}
else if (athlete != null)
{
    <h2>@athlete.FirstNamePreferred @athlete.LastName</h2>
}
else
{
    <h2>No athlete information found.</h2>
} *@

<div class="table-responsive">
    <table class="table table-sm table-hover text-center">
        <thead style="font-weight: bold;">
            <tr>
                <td class="cell-width-secondary" style="text-align: left;">L</td>
                <td class="cell-width-secondary" style="text-align: left;">S</td>
                <td class="cell-width-primary">PR</td>
                <td class="cell-width-primary"><a href="assets/ts-nagm.pdf" target="_blank">B</a></td>
                <td class="cell-width-primary"><a href="assets/ts-ky.pdf" target="_blank">State</a></td>
                <td class="cell-width-primary"><a href="assets/ts-nagm.pdf" target="_blank">BB</a></td>
                <td class="cell-width-primary"><a href="assets/ts-nagm.pdf" target="_blank">A</a></td>
                <td class="cell-width-primary"><a href="assets/ts-ags.pdf" target="_blank">AGS</a></td>
                <td class="cell-width-secondary"><a href="assets/ts-nagm.pdf" target="_blank">AA</a></td>
                <td class="cell-width-secondary"><a href="assets/ts-nagm.pdf" target="_blank">AAA</a></td>
            </tr>
        </thead>
        @if (loadingProgressTimes)
        {
            <caption>Loading times...</caption>
        }
        else if (progressTimes != null)
        {
            <tbody>
                @foreach (var progressTime in progressTimes)
                {
                    var cellClass = String.Empty;

                    <tr class="table-row">
                        <td>@progressTime.Length</td>
                        <td>@progressTime.Stroke</td>
                        @* <td><a href="#" role="button" data-bs-toggle="popover" data-bs-title="@progressTime.Length @progressTime.Stroke PR Details" data-bs-content="Time: @progressTime.PR">@progressTime.PR</a></td> *@
                        <td class="@progressTime.PRClass"><a href="/events/?eventtype=@progressTime.LcsTypeID">@progressTime.PR</a></td>
                        <td class="@progressTime.NagmtBClass">@progressTime.NagmtB</td>
                        <td class="@progressTime.StateCutClass">@progressTime.StateCut</td>
                        <td class="@progressTime.NagmtBBClass">@progressTime.NagmtBB</td>
                        <td class="@progressTime.NagmtAClass">@progressTime.NagmtA</td>
                        <td class="@progressTime.AgeGroupCutClass">@progressTime.AgeGroupCut</td>
                        <td class="@progressTime.NagmtAAClass">@progressTime.NagmtAA</td>
                        <td class="@progressTime.NagmtAAAClass">@progressTime.NagmtAAA</td>
                    </tr>
                }
            </tbody>
        }
        else
        {
            <caption>No data found.</caption>
        }
    </table>
</div>
<script>
    $(() => {
        $('[data-bs-toggle="popover"]').popover();
    });
</script>

@code {
    private bool loadingAthletes;
    private bool loadingProgressTimes;
    private int athleteID;
    private Athlete? athlete;
    private IEnumerable<ProgressTime>? progressTimes;

    [Parameter]
    public int AthleteID
    {
        get
        {
            return athleteID;
        }
        set
        {
            athleteID = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        loadingAthletes = true;
        loadingProgressTimes = true;
        var athleteTask = GetAthlete();
        await athleteTask;
        var progressTimesTask = GetProgressTimes();
        await progressTimesTask;
    }

    private async Task GetAthlete()
    {
        loadingAthletes = true;
        athlete = await SwimService.GetAthlete(athleteID);
        loadingAthletes = false;
        StateHasChanged();
    }

    private async Task GetProgressTimes()
    {
        loadingProgressTimes = true;
        progressTimes = await SwimService.GetProgressTimes(AthleteID);
        loadingProgressTimes = false;
    }
}
